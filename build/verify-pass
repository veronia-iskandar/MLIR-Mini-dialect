module {
  func.func @test(%arg0: tensor<16x16xf32>, %arg1: tensor<16x16xf32>) -> tensor<16x16xf32> {
    %c8 = arith.constant 8 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %extracted_slice = tensor.extract_slice %arg0[%c0, %c0] [%c8, %c8] [%c1, %c1] : tensor<16x16xf32> to tensor<?x?xf32>
    %extracted_slice_0 = tensor.extract_slice %arg1[%c0, %c0] [%c8, %c8] [%c1, %c1] : tensor<16x16xf32> to tensor<?x?xf32>
    %0 = mini.matmul %extracted_slice, %extracted_slice_0 {tiled} : tensor<?x?xf32>, tensor<?x?xf32> -> tensor<8x8xf32>
    %extracted_slice_1 = tensor.extract_slice %arg0[0, 0] [8, 8] [1, 1] : tensor<16x16xf32> to tensor<8x8xf32>
    %1 = mini.add %0, %extracted_slice_1 {tiled} : tensor<8x8xf32>, tensor<8x8xf32> -> tensor<8x8xf32>
    %2 = tensor.empty() : tensor<16x16xf32>
    %inserted_slice = tensor.insert_slice %1 into %2[0, 0] [8, 8] [1, 1] : tensor<8x8xf32> into tensor<16x16xf32>
    return %inserted_slice : tensor<16x16xf32>
  }
}

